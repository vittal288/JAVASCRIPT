SOME javascript methods and important points
0rta3a96
-----------------------------------POINTS -------------------------------------------------------------
P1-->Global functions should be avoided in JavaScript. They can easily be overwritten or destroyed by other scripts.

JS Design Patterns :
https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know

-->Garbage Collection:
JAVASCRIPT automatically removes the memory allocation by its own , whenever variables,events are debounded then JS automatically releases the memory for future reference and cleans the allocated memory.



-------------------------------------------Methods----------------------------------------------
JSONP:
dataType: jsonp for cross-domain request, that means request to different domain and dataType: json for same domain-same origin request.
jsonp-JSON-Padding: the request will go to server with script tag from DOM with Script Injection Concept 
1. <script type="application/javascript"src="http://server.example.com/Users/1234?callback=parseResponse"></script> and it will execute at the browser JAVASCRIPT engine  
2. The response payload will  padding with some call back function like this someCalbackFun({userid:12,name:'vittal'})
3. This request will not record in Netwrok tab of developer tool 
4. Server has to agree for this request to avoid security hack injection of script 
5. For more info https://en.wikipedia.org/wiki/JSONP
6. We cannot make call with JSONP unless and until server objey to change the service side and they have to allow this JSONP request  
7. The browser will, in order, download the script file, evaluate its contents, interpret the raw JSON data as a block, and throw a syntax error. Even if the data was interpreted as a JavaScript object literal, it could not be accessed by JavaScript running in the browser, since without a variable assignment, object literals are inaccessible.
----------------------------------------
InFinite Loop
while(true){
	console.log("vittal");
}

brower will hang
-------------------------------------------------------
Array length =>array length is not the count in the array items instead it is more than the index of the array
var arr =["asdasd","asdasd","asdd"];
arr[100] ="vittal";
arr.length
output-->101
-----------------------------------------------------------------
@@@@ MORE ARRAY METHODS @@@@
push(),pop(),shift(),unshift(),sort(),slice(),splice(),join(),delete(),valueOf(),indexOf(),toString(),concat(),valueOf()

shift() ---> shift the array to down by one index and remove the 0th index item always 
unshift('item')--->add the item to 0th index 
sort()-->
splice()-->using splice we can add and remove the elements 
splice(2,0,'item1','item2')
2-->index where we are adding the new elements :here item1,item2 are adding to the array  in 2nd index 
----------------------------------------------------
var arr =["asdasd","asdad","sadadadasda"];
for(var i=0,item;item=arr[i++];){
     console.log(item)
}
this loop stops executing once for loop finds falsy items ,such as false,0
output -->	
asdasd
asdad
sadadadasda

-----------------------------------------------------------------
another way of iteration of array using forEach
var arr =["asdasd","asdad","sadadadasda"];
arr.forEach(function(item,index,arr){
	console.log(item);
});
asdasd
asdad
sadadadasda
undefined
undefined
--------------------------------------------------------
obj = {name:"vittal"};
localStorage.setItem("myObj",JSON.stringify(obj))
var temp = localStorage.getItem("myObj")
typeof(temp)
localStorage will return the value in terms of a string always 
----------------------------------------------------
PROTOTYPE
REVERSE WORD 
var str = "SAROJINI";
String.prototype.reversed = function(){
   var s ="";
   for(var i=this.length -1; i>=0; i--){
       s += this[i];
   }
return s;
}
str.reversed();

o/p ---> "INIJORAS"

REVRSE SENTENCE 
var str ='SAP LABS INDIA'
String.prototype.reverseStr = function(){
    var _str  = this.split(" ");  
    var _reversedStr =""        
    for(var i=0;i<_str.length;i++){
        _reversedStr+=reverseEachWord(_str[i])+" ";
    } 
    
    function reverseEachWord(eachWord){
      var _rtStr = "";
      for(var i=eachWord.length-1;i>=0;i--){
            _rtStr+=eachWord[i];
      }
     return _rtStr;  
    } 
    
  return _reversedStr.trim();    
    
}
console.log(str.reverseStr());
PAS SBAL AIDNI
----------------------------------------
REDUCE FUNCTION in Array
[0, 1, 2, 3, 4].reduce(function(previousValue, currentValue, index, array) {
  return previousValue + currentValue;
});
-----------------------------------------
CONCAT FUNCTION in Array
var alpha = ['a', 'b', 'c'],
    numeric = [1, 2, 3];

var alphaNumeric = alpha.concat(numeric);

console.log(alphaNumeric); // Result: ['a', 'b', 'c', 1, 2, 3]
-----------------------------------------
CLOSURE CONCEPTS |
------------------
closure: Retain its state, scope after it executes 
https://youtu.be/ZqGFKcCcO-Y?list=PLoYCgNOIyGABI011EYc-avPOsk1YsMUe_
https://youtu.be/iSlSxDNarDY

If there are any variable reference are available then JS will keep those variable alive in a memory, called as CLOSURE
Example : #1
var x =10;
function F1(){
  console.log(x);
  var x = 20;
  console.log(x);
}
F1();

Example #2 
function person(name){
	this.x = name;
}
var me = new person('vittal');
console.log(me);
:you can access x variable through me object 

function person(name){
	var x = name;
}
var me = new person('vittal');
console.log(me);
:you can not access x variable through me object because x is binded locally with function hence this is concept of closures. Even though we can access the variale x in following way 

function person(name){
	var _x= name ;
	this.getName = function(){
		return _x;
	}
}
var me = new person('vittal');
me.getName();
--------------------------------------------
DECLARING STATIC Method/self invoked function
(function(){
	console.log(arguments[0]);
})('params');

//anonymous function expression
var a = function() {
    return 3;
}
 
//named function expression
var a = function bar() {
    return 3;
}
 
//self invoking function expression
(function sayHello() {
    alert("hello!");
})();
------------------------------------------
Can you write a class named "Stack" inheriting from class Array as base class

var Stack = function(){

};

Stack.prototype = [];
Srack.constructor = Stack;
Stack.prototype.add = function(item){ 
	this.push(item);
};
------------------------------------------------------------------------------
SAMPLE CLASS
var sampleCls = function(){
this.add= function(a,b){
   return a+b;
},

this.subs = function(a,b){
  return a-b;
}
}


sampleCls.prototype.div = function(a,b){
   return a/b
}
var obj = new sampleCls();
obj.add(2,3);
obj.div(2,3);
------------------------------------------------------------------------------
RETURNING FROM NESTED FUNCTION using CALLBACK mechanism

var sampleCls = function(){
	this.getRecords = function(fnCalBack){					
		var restAPI = $http.get('http://www.w3schools.com/angular/customers.php');				
		restAPI.success(function(res){			
			if(fnCalBack){
				return fnCalBack({data:res.records});				
			}				
		});		
	};
	this.putRecords = function(records){
		//your code
	};	
}

//pass call back function as an object
var obj = new sampleCls();
obj.getRecords(function(data){
	console.log('data--->',data)
})
-----------------------------------------------------
DECLARING TWO FUNCTION with SAME NAME and test which one will execute?
function fnNameSame(){
  var date = new Date();  
  return date.getHours()
  
}
function fnNameSame(){
  console.log('hello')  
}
fnNameSame();
O/P--->hello 
Conclusion : Recent written or recent include function will takes priority 
-----------------------------------------------------
@@@ PASS FUNCTION as PARAMETER to ANOTHER FUNCTION @@@@
function getCurrentHrs(){
  var date = new Date();  
  return date.getHours()
  
}
function greetMessage(fnParam){
    crntHr = fnParam();
	if(crntHr >= 22 || crntHr <= 5){
		console.log('Goodnight , World !!')
	}
	else
	{
		console.log('Hello , World !!')
	}
}
greetMessage(getCurrentHrs);

o/p ---> Hello , World !!
--------------------------------------------------------
@@@@ DIFFERENCE b/w Expression or anonymous function and named function.@@@@
---Expression or anonymous function
expressionFn();
var expressionFn = function(){
  console.log('Hello..')
}
O/P---> Shows Error,expressionFn is not a function. Why because we are calling a function , before its declaration 

-----NAMED FUNCTION
namedFunction();
function namedFunction(){
   console.log('HELLO')
}
O/P ---> HELLO , because we are calling a function with global scoped , I mean it is calling a variable which is declared without VAR keyword 
---------------------------------------------------------
@@@ CLASS and OBJECT @@@
function fnSampleCls(){
  console.log('Hello I am constructor's line of code ');
  
  this.sampleMethod = function(){
      console.log('I am not a constructor');
  }
  
  console.log('Hello I am also constructor's line of code ');
}

var obj = new fnSampleCls();
O/P---> 
>> Hello I am constructor's line of code 
>> Hello I am also constructor's line of code 
Whenever object get instantiated the function code will get execute. 
And the creating an object is equivalent to calling a function.Hence considered here that function body code considered as CONSTRUCTOR 
-------------------------------------------------------------------------------------
@@@ ASSOCIATIVE ARRAY DECLARATION @@@@
var myObj = {name:'vittal',age:27,empId:'M1020535'}
console.log(myObj['name']);
OR
var str = 'name';
console.log(myObj[str]);
o/p--->vittal

@@@ WE CAN STORE a FUNCTION inside the object and access it 
var obj = {name:'vittal',fn:function(){console.log('fn is called')}};
obj.fn()
O/P ---> fn is called
-------------------------------------------------------------------------------------------
@@@ WAY of defining class in JS @@@@
way#1
var function = Table(rows,cols){
  this.rows = rows;
  this.cols= cols;
  this.cellCount = function(){
     return this.rows * this.cols;
  }
}

way#2
function Table(rows,cols){
  this.rows = rows;
  this.cols= cols;
  this.cellCount = function(){
     return this.rows * this.cols;
  }
}

way # 3
var Table = {
				rows:3,
				cols:3,
				cellCount:function(){return this.rows * this.cols}
}

Access --> Table.cellCount()
O/P -->9
but way 3 has dis advantage , that you cannot create instance of object literals and it is not reusable code  
------------------------------------------------------
@@@@ ABOUT PROTOTYPE @@@@
prototype is used to attach methods or properties dynamically to the classes 
var Table = function(row,col){
     this.row = row;
     this.col = col;        
} 

var tbl = new Table();
Table.prototype.getCellCnt = function(){       
         return this.row * this.col
    }
tbl.getCellCnt();
O/P--->NaN
The PRIVATE members are cannot be accessed using function which is created from PROTOTYPE 
----------------------------------------------------------------------------------
USE OF eval() method -->eval method executes the JS code which you written in string 
var str ="alert('hello JS')";
console.log(str)
O/P --- > alert('hello JS')
eval(str);
O/P ---> open alert window in brower 
-----------------------------------------------------------------------------------
JAVASCRIPT EXECUTION CONTEXT
--> the JS executes in three scopes 
1.Global execution context
2.Functional executional context
3.Eval() executional context 
------------------------------------------------------------------------------------
@@@@ PUBLIC and PRIVATE members @@@@
function fnSample(){
  var x =10;
  this.x =20;
  console.log(x);
}
fnSample();
O/P--->10,because x refers to local scope variable hence the output is 10


function fnSample(){
  //var x =10;
  this.x =20;
  console.log(x);
}
fnSample();
O/P--->20, is there are not local variable with that name then , the value from PROTOTYPE(property) will read instrad

-----------------------------------------------------------------------------
"THIS" KEYWORD SCOPE

this keyword always refers to Global scope and if you create instance of that function then this keyword refers to that new object

Example
var x =0;
function fnSample(){
  this.x =10;
}
fnSample();
console.log(this.x)
O/P--->10

now create instance of fnSample
var x =0;
function fnSample(){	
	this.x = 10;
}
var obj = new fnSample();
console.log(this.x)

O/P--->0
-----------------------------------------------------------------------------
APPLY METHOD
-----------------------------------------------------------------------------
CALL METHOD
-------------------------------------------------------------------------------
INHERITANCE can implemented using CLOSURE and PROTOTYPE
-----------------------------
1.INHERITANCE using CLOSURES|
-----------------------------
Scenario  or design : Baseclass or superclass is CAR and having name and drive are two methods. SUPERCAR which is inherited from base class CAR and implementing new feature called FLY and also know DRIVE

//to be used as Drive method of car
function Drive(){
    console.log('Hi There I am '+this.name+'I am driving the car')
}

//class car
function Car(name){
  this.name = name;
  this.drive = Drive;
}

//fly method used for SUPERCAR class
this.fly = function(){
  console.log('Hi Ther I am '+this.name+'I am flying')
}


//class SUPERCAR
function SuperCar(name){
  
  
  //implement closure inheritance 
  this.inheritedFrom = Car;
  this.inheritedFrom(name);
  
  //supercar knows how to fly 
  this.Fly = Fly;
 
}


var car = new Car('vittal');
car.drive();
O/P--->Hi There I am Vittal I am driving the car

var superCar = new SuperCar();
superCar.drive();
superCar.fly();
O/P--->
Hi There I am VittalI am driving the car
Hi Ther I am Vittal I am flying

--------------------------------
2. INHERITANCE using PROTOTYPE |
--------------------------------
//define base class Car
function Car(name){
  this.name  = name;
  this.drive = Drive;
}
//define Drive method
function Drive(name){
   console.log('Hi There I am '+ this.name+ ' I am driving');
}


//define sub class called SuperCar
function SuperCar(name){  
  // call base class constructor
  Car.call(this,name);  
}

//inherit base class property to SUPERCAR
SuperCar.prototype = new Car();

//Assign back the constructor of SuperCar to SuperCar , because above code snippet will override the constructor of SuperCar to Car
SuperCar.prototype.constructor = SuperCar;


//SuperCar.fly method 
SuperCar.prototype.fly = function(){
  console.log('Hi There I am ' + this.name + 'I am Flying !!!');	  
}

//create instance of Car
var car = new Car('Vittal');
car.drive();

//create instance of superCar
var superCar = new SuperCar('Vittal');
superCar.drive();
superCar.fly();
----------------------------------------------------------------------------------
@@@@@@ SIMPLE CONCEPTS of CALLBACK @@@@@

task2 has to execute once the task1 get completes 

function task1(a,b,fnCallback){

     var c = a+b;
     fnCallback(c)
}

function task2(param){
   
  alert(param)

}

task1(2,3,task2)
----------------------------------------------------------------------------------------
SYNCHRONOUS and ASYNCHRONOUS(default behaviour of JS) in JAVASCRIPT
@@@@@
#SYNCHRONOUS EXECUTION(BLOCKING)
 
https://www.youtube.com/watch?v=yLwJd9M_GZs

Description : The parser will start from HTML tag to construct the DOM and while parsing the HTML code if browser parser found the SCRIPT TAG then PARSER will be in PAUSED state till SCRIPT code get execute then this is called BLOCKING PHASE or SYNCHRONOUS PHASE once the SCRIPT completes then BROWSER PARSER will resume  

1.BROWSER-->{DOM construction phase : There are three states of document.readyState i.e LOADING (DOM construction phase)-->INTERACTIVE(DOM finished it loading but still images and dependency scripts are loading phase and then DOMContentLoaded Event of document, will fire)-->COMPLETE(everything finished it loading,then Load Event of Window will fire )}

LOADING :
Example:
HTML CODE
<!doctype HTML>
<html>
	<head>		
BLOCKING PHASE ---> <script src='scriptJS.js'></script>
	</head>
	<body>
		<form>
			<input type='text' />
		</form>
	</body>
	<script>	
</script>
</html>

JS CODE
for(var i=0;i<=9000000;i++){
	
	if(i % 100000 ===0){
		console.log('Form is loading');
		console.log(document.forms.length);
		console.log(document.readyState);
	}
}
INTERACTIVE: (image and dependency script loading phase ):

COMPLETE:
after everything loaded then type(document.readyState)in browser console to find out the status 

BROWSER-->HTML TAGS(including all tags)-->whenever you found script tags then browser PARSER will be hold phase till execution of JS code which is written in that script tag and hence it is called BLOCKING PHASE -->Then Brower PARSER will resumed 


#ASYNCHRONOUS EXECUTION (NON BLOCKING),Brower parsing will not pause and JS code execution in background 
https://www.youtube.com/watch?v=KHSeGURldw8

BROWER PARSING WILL NOT be in paused state and JS code which is included the page will execute at the backend 

<!doctype HTML>
<html>
	<head>
		<link rel='stylesheet' href='styles.css'/>	
		<script async src='scriptJS.js'></script>
	</head>
	<body>
		<header>
		</header>
		<main>
			<div class='parentDiv'>
				<div class='child'>
				</div>
				<div class='child'>
				</div>
			</div>
			
			
			<!--BOX MODAL -->
			<!--<div class='boxModal'>
			</div>-->
			
			<form>
				<input type='text' />
			</form>
			<form>
				<input type='text' />
			</form>
			<form>
				<input type='text' />
			</form>
			<form>
				<input type='text' />
			</form>
			<form>
				<input type='text' />
			</form>
			<form>
				<input type='text' />
			</form>
			<form>
				<input type='text' />
			</form>
			<form>
				<input type='text' />
			</form>
		</main>
		<footer>
		</footer>
	</body>
	<script>	
</script>
</html>



-------------------------------------------------------------------------
@@@@@@@@ METHOD OVERIDE @@@@@@@

function fnAdd(a,b){
	return a+b;
}

function fnAdd(a,b){
	return a-b;
}

function fnAdd(a,b){
	return a*b
}

fnAdd(2,3)
O/P-----> 6

-----------------------------------------------------------------------------------------
@@@@ PROTOTYPICAL INHERITANCE @@@@@

child Scope(search property with the scope which is associated and if not found then it will search to its parent ) --->Parent Scope(is that property did not found in parent scope then moves to root scope) --->Root Scope 

-----------------------------------------------------------------------------------------------
@@@@ NAMESPACE IN JAVASCRIPT @@@@@

Namespace is a container and it contains methods,identifiers and function in one place. You know in JS everything is an object and JS there is no stanrds procedure to declare name space eventhough it is possible. In JS whatever you create it will expose to globally if you have not followed some patterns and it leads to collision between the other methods of library if we are using in the application basically it will call as method overridding.

WITHOUT NAME SPACE (all methods and properties are global scope)
function output(param){

	console.log(param);
}
function fnMyclass(a,b){
	
	this.a =a;
	this.b =b;
	this.mult = function(){
		return this.a * this.b
	}
}

var obj = new fnMyclass(2,3);
output(obj.mult());

WITH NAME SPACE

var MYNAMESPACE={

	output:function(param){
		console.log(param);
	},
	fnMyclass:function(a,b){
		this.a =a;
		this.b =b;
		this.mult = function(){
			return this.a * this.b
		}
	}	
}

var myObj = new MYNAMESPACE.fnMyclass(2,3);
myObj.output()

------------------------------------------------------------------------------------------------
@@@ Singleton Classes @@@
http://www.dofactory.com/javascript/singleton-design-pattern

Description : Only one object we can create from the class and this class can access globally scope
As per the single ton design pattern we can end up the instantiation to one one ,hence this single instance called singleton.

Advantage :It can avoid the global variable declaration and one point access of all properties and it avoid namespace polluting .

Lazy Loading Design Patterns :Lazy load checks whether object is created or not , if not then Lazy Load pattern creates and stored it for future reference. Lazy loading is a CPU and memory saving technique by creating objects only when absolutely necessary.

What is this called ?
var mySingleTon ={

	fnAdd:function(){
		//write some code here
	},
	fnSubs:function(){
		//write some code here 
	}
}

Singleton Class declaration: 
var singleTon =(function(){
	var instance = '';
	function createInstance(){

			 var object = new Object();
			 return object;
	}
	  return{
			 getInstance:function(){
				 if(!instance){
				   instance = createInstance()
				 }  
			  return instance;         
	        }
	    }
})();
-------------------------------------------------------------------------------------------------
@@@@ QUESTIONARIES @@@@@@
-->JAVASCRIPT name space 
-->Memory leak in JS
-->How could you say that JS in single threaded and if possible to make the JS as multi threaded then how to do it
-->Remove duplicate items from an array and sorting an array 

@@@@@ TASK @@@@@@
1. Remove duplicate items from following arrays
var arr1 =['1','2','3','1','3','4','4'] --> 
output ['1','2','3','4']
var arr2 = [{'x' : 1, 'y': 2},{'x' : 1, 'y': 2},{'x' : 2, 'y': 3},{'x' : 2, 'y': 4},{'x' : 3, 'y': 4}]
output :
[{'x' : 1, 'y': 2},{'x' : 2, 'y': 3},{'x' : 2, 'y': 4},{'x' : 3, 'y': 4}]

2. sort the array ascending and descending 
var arr1 =['3','1','2','4','7','5','6']

--------------------------------------------------------------------
JAVASCRIPT Overiding(is possible) and Overloading(not possible)


Overiding: Example
function fn(){

console.log('1');
}

function fn(){
console.log('2');

}

fn();
o.p --->2


OVERLOADING:is ability of one function to perform different tasks

function fnOverloading(){
	//some code 	
} 

function fnOverloading(param1,param2){
	//some code	
}
function fnOverloading(param1,param2,param3){
	//some code 	
}

we cannot do different functionality here because which is written or include in JS interpretation that function will execute.
Since this feature exist in JS we cannot implement overridding in JS.

But in other language like JAVA,C,C++ these are different function, based on function call with number paramaters each function will get call.

Assuming in C :

fnOverloading(1,2){
//
}
is different from following functions
fnOverloading(1,2,3){
//
}
 and 
fnOverloading(){
//
}


Encapsulations,Inheritance,Abstractions(Bricks Example),Polymorphism
------------------------------------------------------------------------
@@@@ hasOwnProperty @@@@
To check if a property of an object belongs to the specified object, or is inherited (via the prototype chain). 
--------------------------------------------------------------------------------
@@@ REMOVE DUPLICATES and SORT using bubble sort @@@
//http://interactivepython.org/runestone/static/pythonds/SortSearch/TheBubbleSort.html
/* Bubble sort and remove dupilcates from an array */
//var arrUnSort =[54,26,93,17,77,31,44,55,20];//PASS
var arrUnSort =[1,0,3,3,2,2,4]; //PASS
//var arrUnSort = [1,0,3,3,2,2,4,5,5,5,8,1,6,7,7,0,0,22]; //PASS
var arrUnSort =['a','b','c','d','a','b','d','d','e','b','c','i','j','z']//pass


Array.prototype.removeSortandDuplicate = function(){
    //this is pointing to array                       
    var passNum = this.length;
    // to repeat loops n*n times               
    while(passNum>0){       
        for(var i=0;i<this.length;i++){
            
            //remove duplicates from an array 
            if(this[i]==this[i+1]){
                var _indx = this.indexOf(this[i]);
                this.splice(_indx,1);            
            }
            
            //sort and array using bubble sort    
            if(this[i]>this[i+1]){
                var _temp = this[i]; 
                this[i] = this[i+1];
                this[i+1] =_temp; 
            }     
        }                   
       passNum = passNum-1;
    }  
    return this;
}   

console.log(arrUnSort.removeSortandDuplicate());

---------------------------------------------------------------------
How to call a function if function name is inside an array and which is defined in global scope?
-------------------------------------------------------------------------
var arrSample =[fnName,1,2];
//if fnName is not a string 
arrSample[0].call();

//if fnName is string object 
window[arrSample[0]]()

function fnName(){
	console.log('fnName called');
}

-----------------------------------------------------
What is the Role of JavaScript Obfuscation?
---------------------------------------------------
var arrUnSort =['a','b','c','d','a','b','d','d','e','b','c','i','j','z'];
Array.prototype.removeSortandDuplicate = function(){
    //this is pointing to array                       
    var passNum = this.length;
    // to repeat loops n*n times               
    while(passNum>0){       
        for(var i=0;i<this.length;i++){
            
            //remove duplicates from an array 
            if(this[i]==this[i+1]){
                var _indx = this.indexOf(this[i]);
                this.splice(_indx,1);            
            }
            
            //sort and array using bubble sort    
            if(this[i]>this[i+1]){
                var _temp = this[i]; 
                this[i] = this[i+1];
                this[i+1] =_temp; 
            }     
        }                   
       passNum = passNum-1;
    }  
    return this;
}   

console.log("Deobfuscate JS O/p" , arrUnSort.removeSortandDuplicate());

obfuscated code :
//JS obfuscate code 
var _0x535a=["\x61","\x62","\x63","\x64","\x65","\x69","\x6A","\x7A","\x72\x65\x6D\x6F\x76\x65\x53\x6F\x72\x74\x61\x6E\x64\x44\x75\x70\x6C\x69\x63\x61\x74\x65","\x70\x72\x6F\x74\x6F\x74\x79\x70\x65","\x6C\x65\x6E\x67\x74\x68","\x69\x6E\x64\x65\x78\x4F\x66","\x73\x70\x6C\x69\x63\x65","\x4F\x62\x66\x75\x73\x63\x61\x74\x65\x20\x4A\x53\x20\x4F\x2F\x70","\x6C\x6F\x67"];var arrUnSort=[_0x535a[0],_0x535a[1],_0x535a[2],_0x535a[3],_0x535a[0],_0x535a[1],_0x535a[3],_0x535a[3],_0x535a[4],_0x535a[1],_0x535a[2],_0x535a[5],_0x535a[6],_0x535a[7]];Array[_0x535a[9]][_0x535a[8]]=function(){var _0xa47dx2=this[_0x535a[10]];while(_0xa47dx2>0){for(var _0xa47dx3=0;_0xa47dx3<this[_0x535a[10]];_0xa47dx3++){if(this[_0xa47dx3]==this[_0xa47dx3+1]){var _0xa47dx4=this[_0x535a[11]](this[_0xa47dx3]);this[_0x535a[12]](_0xa47dx4,1)};if(this[_0xa47dx3]>this[_0xa47dx3+1]){var _0xa47dx5=this[_0xa47dx3];this[_0xa47dx3]=this[_0xa47dx3+1];this[_0xa47dx3+1]=_0xa47dx5}};_0xa47dx2=_0xa47dx2-1};return this};console[_0x535a[14]](_0x535a[13],arrUnSort[_0x535a[8]]())
	

------------------------------------------------------------------------------------------------------------
						PROMISES
------------------------------------------------------------------------------------------------------------
//https://www.twilio.com/blog/2015/10/asyncawait-the-hero-javascript-deserved.html
function callAPI(){
	
	//ES5 
	return new Promise(function(resolve,reject){
		if(success){
			resolve(with data)
		}else{
			reject(with error )
		}
	});
	
	//OR ES6
	return new Promise((resolve,reject)=>{
		request('http://ron-swanson-quotes.herokuapp.com/v2/quotes', function(error, response, body) {			
			resolve(body);
		});
	});	  
}

//Promise can be captured as follows 

callAPI().then((res)=>{
	console.log(res);
},(err)=>{
	console.log(err);
});

------------------------------------------------------------------------------------------------------------				


-------------------------------------------------------SECURITY from JS and HTML5------------------------------------------
1.Use HTTPS or SSL for requesting and getting from server 
2. Set coockie with SSL so that it cannot be accessable using document.coockie
3. Use Js Obsfucation
4. Avoid to use eval() and Global method declaration
5. Validate in user inputs fields for SCRIPT tag injection 
  Content-Security-Policy: policy
6 Set proper HTTP headers using meta tag like 
  Strict-Transport-Security: max-age=3600; includeSubDomains
7. Try to avoid writing inline JS script like body='onLoad()',<a href="javascript:doTheClick()">, this is because browser cannot distinguish between  devloper code and hacker code
8. Try to avoid use of JSONP request for CORS 


-------------------------------------------------------------------------------------------
FOR LOOP in JS is synchronous execution 
---------------------------------------------------------------------------------------
MAP function is async method and it returns an entire array 
var arr=["apple","mango","jack"];

arr.map(function(item){
   if(item === "apple")
      return item
})
["apple", undefined, undefined]
----------------------------------------------------------------------------------------
FILTER function is async and it returns array with matched item 
var arr=["apple","mango","jack"];

arr.map(function(item){
   if(item === "apple")
      return item
["apple"]
})

Design patterns, and crucial concepts of Closures, IIFE, Nested loops and callbacks, Scoping, Hoisting, etc.

----------------------------------------------------------------------------------------------------------------------
Accessing the properties inside of function scope or within call back function  from local scope 
var foo ={
    a:20,
    b:function(){
      setTimeout(function(){
        console.log(this.a)
      },100)
     
}
}

foo.b();
O/P --> undefined

var foo ={
    a:20,
    b:function(){
      setTimeout(function(){
        console.log(this.a)
      }.bind(this),100)
     
}
}

foo.b();
O/P --> 20

----------------------------------------------------------------------------------------------------------------------------------------MUTABLE IN JS:
The piece of data which we never wanted to change , javascript by default does not do mutablity. 
We have to write alternative to this.


var a= {name:"vittal"};
a.name="Sandy";
console.log(a) -->{name:"Sandy"}
So a is not retained its value then we conclude that JS is not Mutable by default.

Then How to acheive Mutabality in JS
var a ={name:"VIttal",age:28}
var b = Object.assign({},a,{name:"Sande"})
a
Object {name: "VIttal", age: 28}
b
Object {name: "Sande", age: 28}

For array, we have to Object.assign,CONCAT,FILTER,MAP and REDUCE  to acheive MUTABLE
USING CONCAT
var a =[1,2,3]
var b = a.concat(3)
a
[1, 2, 3]
b
[1, 2, 3, 3]

USING FILTER 
var a =[1,2,3]
var b = a.filter( (item) => item !=2)
a
[1, 2, 3]
b
[1, 3]

---------------------------------------------------------------------------------------------------------------------------------------
													SCOPE and CONTEXT
---------------------------------------------------------------------------------------------------------------------------------------
//scope	--> variable access
//context --> this 				
https://youtu.be/SBwoFkRjZvE?list=PLoYCgNOIyGABI011EYc-avPOsk1YsMUe_								 

-------------------------------------------------------------------------------------------------------------------------------
													JQUERY
------------------------------------------------------------------------------------------------------------------------------------
1. JQUERY Ajax preFilter 



------------------------------ Points to search --------------------------
1. Block or local scoping in JS
2. Object.observe()
3. How can you say that JS is single threaded 





########################################################################################################################################
#   																																   #                                                ES6 or 2015 or TYPESCRIPT
#																																	   #
########################################################################################################################################


Arrow Function or lambda function 
setTimeout(function(){  
	// logic 
}, 1000)

setTimeout(()=>{
	//logic 
}, 1000 )

What is Onstract class used for ?
What is generator in ES6 
Difference Between let and var 

if(true){
	var a ="something";
}
console.log(a) --> something 

if(true){
	let a ="something ";
}
console.log(a) --> a is not defined  













