11. The below script has some troubles getting the numbers right. What could be wrong?
32

var fruitSaladRecipe = "2 apples, papaya, coconut, 5 oranges, apple, banana",
    ingredients = fruitSaladRecipe.split(/,\s+/),
    ingredientHash = {},
    num = 0; // Total number of fruits
for (var i=0 ; i<ingredients.length ; i++) {
    var ingredient = ingredients[i],
        fruitType = ingredient.match(/(\w+)$/)[1].replace(/s$/, ""),
        numPieces;
    if (/^\d+/.test(ingredient)) {
        var num = ingredient.match(/^(\d+)/)[1];
        numPieces = parseInt(num, 10);
    }else{
        numPieces = 1;
    }
    if (/^(?:banana)$/.test(fruitType)) {
        // Speaking of bananas, let's add some more! Those things are delicious!
        numPieces *= 2;
    }
    num += numPieces;
    if (fruitType in ingredientHash) {
        numPieces += ingredientHash[fruitType];
    }
    ingredientHash[fruitType] = numPieces;
}
var message = num + " fruit(s) in total:";
for (var ingredient in ingredientHash) {
    if (ingredientHash.hasOwnProperty(ingredient)) {
        message += "  " + ingredientHash[ingredient] + " " + ingredient + "(s)";
    }
}
alert(message);



5512 fruit(s) in total:  3 apple(s)  1 papaya(s)  1 coconut(s)  5 orange(s)  2 banana(s)

var a = "foo",
    b = a;
b += "bar";
alert(a);

14th is wring 
20th is Wrong 

function StateMachine(initialState) {
    this.state = initialState || 'foo';
    return {
        transition: function() {
            this.state = {foo:'bar', bar:'quux', quux:'foo'}[this.state];
            return this;
        }
    };
}
var sm = new StateMachine();
alert(sm.transition().transition().state);



function StateMachine(initialState) {
    this.state = initialState || 'foo';
    return {
        transition: function() {
            this.state = {foo:'bar', bar:'quux', quux:'foo'}[this.state];
            return this;
        }
    };
}
var sm = new StateMachine();
alert(sm.transition().transition().state);


--------------


var isOdd = function(n) {return n&1;},
    isDivisibleByThree = function(n) {return !(n%3);},
    addOne = function(n) {return n+1;};
alert([1,2,3,4,5,6,7].map(addOne).filter(isOdd && isDivisibleByThree).length);

---------------

Below is a function for executing asynchronous tasks in parallel. Why doesn't it work as expected?

function doInParallel(tasks, cb) {
    var numTasks = tasks.length;
    tasks.forEach(function (task) {
        task();
        numTasks -= 1;
        if (numTasks === 0) {
            cb();
        }
    });
}
doInParallel([...], function () {
    // Execute only when tasks are complete
});